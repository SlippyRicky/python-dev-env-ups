#!/bin/bash

# Python Development Environment Quick Setup and Activation
# For UPS M1 SGM Cross-Platform Python Development Environment
# Usage: ./python-dev-env-up [options]

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}=== $1 ===${NC}"
}

# Function to show usage
show_usage() {
    echo "Usage: ./python-dev-env-up [OPTIONS]"
    echo ""
    echo "OPTIONS:"
    echo "  -h, --help       Show this help message"
    echo "  -s, --setup      Force full environment setup (recreate venv)"
    echo "  -c, --check      Check environment status without activation"
    echo "  -j, --jupyter    Activate environment and start Jupyter notebook"
    echo "  -t, --test       Activate environment and run tests"
    echo "  -u, --update     Update packages and requirements.txt"
    echo ""
    echo "Examples:"
    echo "  ./python-dev-env-up                # Quick activation"
    echo "  ./python-dev-env-up --setup        # Full setup from scratch"
    echo "  ./python-dev-env-up --jupyter       # Start Jupyter notebook"
    echo "  ./python-dev-env-up --test          # Run test suite"
}

# Detect operating system
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="Linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macOS"
    elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]]; then
        OS="Windows"
    else
        OS="Unknown"
    fi
}

# Check if environment exists and is functional
check_environment() {
    local env_status="healthy"
    
    # Check if venv directory exists
    if [ ! -d "venv" ]; then
        print_warning "Virtual environment not found"
        return 1
    fi
    
    # Check if activation script exists
    if [ ! -f "venv/bin/activate" ] && [ ! -f "venv/Scripts/activate" ]; then
        print_warning "Virtual environment activation script not found"
        return 1
    fi
    
    # Try to activate and check Python
    if source venv/bin/activate 2>/dev/null || source venv/Scripts/activate 2>/dev/null; then
        if ! python -c "import sys; assert sys.version_info >= (3, 6)" 2>/dev/null; then
            print_warning "Python version in virtual environment is too old"
            return 1
        fi
    else
        print_warning "Cannot activate virtual environment"
        return 1
    fi
    
    return 0
}

# Quick environment status check
status_check() {
    print_header "Environment Status Check"
    
    detect_os
    print_status "Operating System: $OS"
    
    # Check if already in virtual environment
    if [ -n "$VIRTUAL_ENV" ]; then
        print_success "Virtual environment already active: $VIRTUAL_ENV"
        python_path=$(which python)
        python_version=$(python --version)
        print_status "Python: $python_version at $python_path"
        
        # Check key packages
        print_status "Checking installed packages..."
        if python -c "import pytest, black, flake8, jupyter, numpy, pandas, matplotlib, requests" 2>/dev/null; then
            print_success "All key packages are installed"
        else
            print_warning "Some packages may be missing"
        fi
        return 0
    fi
    
    # Check environment health
    if check_environment; then
        print_success "Virtual environment is ready"
    else
        print_warning "Virtual environment needs setup or repair"
        return 1
    fi
    
    # Check for required scripts
    for script in "setup_env.sh" "activate_env.sh" "check_platform.sh"; do
        if [ -f "$script" ]; then
            print_success "Found $script"
        else
            print_warning "Missing $script"
        fi
    done
}

# Activate environment
activate_environment() {
    print_status "Activating Python development environment..."
    
    # Check if already activated
    if [ -n "$VIRTUAL_ENV" ]; then
        print_success "Environment already active!"
        return 0
    fi
    
    # Try to activate
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    elif [ -f "venv/Scripts/activate" ]; then
        source venv/Scripts/activate
    else
        print_error "Virtual environment not found!"
        print_status "Run: ./python-dev-env-up --setup"
        return 1
    fi
    
    print_success "Environment activated: $(basename $VIRTUAL_ENV)"
    print_status "Python: $(python --version) at $(which python)"
}

# Full environment setup
full_setup() {
    print_header "Full Environment Setup"
    
    if [ -f "setup_env.sh" ]; then
        print_status "Running setup_env.sh..."
        ./setup_env.sh
    else
        print_error "setup_env.sh not found!"
        print_status "Please ensure you're in the correct directory"
        return 1
    fi
}

# Update packages
update_packages() {
    print_status "Updating packages..."
    
    if [ -z "$VIRTUAL_ENV" ]; then
        activate_environment || return 1
    fi
    
    # Upgrade pip
    print_status "Upgrading pip..."
    python -m pip install --upgrade pip
    
    # Update packages
    print_status "Updating installed packages..."
    pip install --upgrade pytest black flake8 jupyter numpy pandas matplotlib requests
    
    # Update requirements.txt
    print_status "Updating requirements.txt..."
    pip freeze > requirements.txt
    
    print_success "Packages updated successfully"
}

# Start Jupyter notebook
start_jupyter() {
    print_status "Starting Jupyter notebook..."
    
    if [ -z "$VIRTUAL_ENV" ]; then
        activate_environment || return 1
    fi
    
    # Check if Jupyter is installed
    if ! python -c "import jupyter" 2>/dev/null; then
        print_error "Jupyter not installed!"
        print_status "Installing Jupyter..."
        pip install jupyter
    fi
    
    # Start Jupyter
    print_success "Starting Jupyter notebook server..."
    jupyter notebook
}

# Run tests
run_tests() {
    print_status "Running test suite..."
    
    if [ -z "$VIRTUAL_ENV" ]; then
        activate_environment || return 1
    fi
    
    # Check if pytest is available
    if ! python -c "import pytest" 2>/dev/null; then
        print_error "pytest not installed!"
        return 1
    fi
    
    # Run tests
    if [ -d "tests" ]; then
        print_status "Running tests in tests/ directory..."
        pytest tests/ -v
    else
        print_warning "No tests directory found"
        print_status "You can create tests in the tests/ directory"
    fi
}

# Main function
main() {
    # Parse command line arguments
    case "$1" in
        -h|--help)
            show_usage
            exit 0
            ;;
        -s|--setup)
            full_setup
            exit $?
            ;;
        -c|--check)
            status_check
            exit $?
            ;;
        -j|--jupyter)
            activate_environment && start_jupyter
            exit $?
            ;;
        -t|--test)
            activate_environment && run_tests
            exit $?
            ;;
        -u|--update)
            activate_environment && update_packages
            exit $?
            ;;
        "")
            # Default behavior: check and activate
            print_header "Python Development Environment - UPS M1 SGM"
            
            # Quick status check
            if status_check >/dev/null 2>&1; then
                activate_environment
                
                print_success "Environment ready! You can now:"
                echo "  • Run examples: python src/example.py"
                echo "  • Run tests: pytest tests/"
                echo "  • Start Jupyter: jupyter notebook"
                echo "  • Format code: black src/"
                echo "  • Check style: flake8 src/"
                echo ""
                print_status "For more options: ./python-dev-env-up --help"
            else
                print_warning "Environment needs setup"
                read -p "Run full setup now? (y/N): " -n 1 -r
                echo
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    full_setup
                else
                    print_status "Run: ./python-dev-env-up --setup when ready"
                fi
            fi
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Ensure we're in the right directory
if [ ! -f "requirements.txt" ] && [ ! -f "setup_env.sh" ]; then
    print_error "This doesn't appear to be the Python development environment directory"
    print_status "Please run this script from the env1 directory"
    exit 1
fi

# Run main function
main "$@"